<?php

/**
 * @file
 * Contains install and update routines for Lightning.
 */

use Drupal\Core\Entity\Entity\EntityViewMode;
use Drupal\node\Entity\NodeType;
use Drupal\user\Entity\Role;

/**
 * Implements hook_install().
 */
function lightning_core_install() {
  $content_roles = \Drupal::config('lightning_core.settings')->get('content_roles');

  /** @var \Drupal\node\NodeTypeInterface $node_type */
  foreach (NodeType::loadMultiple() as $node_type) {
    $roles = array();
    foreach ($content_roles as $id => $role) {
      if ($role['enabled']) {
        $roles[] = $node_type->id() . '_' . $id;
      }
    }
    $roles = Role::loadMultiple($roles);

    if (empty($roles)) {
      \Drupal::moduleHandler()
        ->invoke('lightning_core', 'node_type_insert', [$node_type]);
    }
  }

  // Mark core view modes as internal.
  lightning_core_update_8002();
}

/**
 * Creates the lightning_core settings object.
 */
function lightning_core_update_8001() {
  $values = lightning_core_read_config('lightning_core.settings', 'lightning_core');

  \Drupal::configFactory()
    ->getEditable('lightning_core.settings')
    ->setData($values)
    ->save();
}

/**
 * Marks certain node view modes as internal.
 */
function lightning_core_update_8002() {
  $view_modes = EntityViewMode::loadMultiple([
    'node.rss',
    'node.search_index',
  ]);
  /** @var \Drupal\Core\Entity\EntityViewModeInterface $view_mode */
  foreach ($view_modes as $view_mode) {
    $view_mode->setThirdPartySetting('lightning_core', 'internal', TRUE)
      ->save();
  }
}

/**
 * Marks all entity token view modes as internal.
 */
function lightning_core_update_8003() {
  if (\Drupal::moduleHandler()->moduleExists('token')) {
    lightning_core_modules_installed(['token']);
  }
}

/**
 * Installs REST, Search API and content index.
 */
function lightning_core_update_8004() {
  /** @var \Drupal\Core\Extension\ModuleHandlerInterface $module_handler */
  $module_handler = \Drupal::moduleHandler();
  /** @var \Drupal\Core\Extension\ModuleInstallerInterface $installer */
  $installer = \Drupal::service('module_installer');

  // Install REST and Search API if needed.
  if (!$module_handler->moduleExists('rest')) {
    $installer->install(['rest']);
  }
  if (!$module_handler->moduleExists('search_api_db')) {
    $installer->install(['search_api_db']);
  }

  \Drupal::service('lightning.config_helper')
    ->optional('lightning_core')
    ->createEntity('search_api_index', 'content')
    ->createEntity('view', 'content_index');
}

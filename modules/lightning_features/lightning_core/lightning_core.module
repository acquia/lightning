<?php

/**
 * @file
 * Contains core functionality for the Lightning distribution.
 */

use Drupal\Core\Block\BlockPluginInterface;
use Drupal\Core\Entity\EntityDisplayModeInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\Entity\EntityViewMode;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\lightning_core\Element as ElementHelper;
use Drupal\node\NodeTypeInterface;
use Drupal\path\Plugin\Field\FieldType\PathFieldItemList;
use Drupal\user\Entity\Role;
use Drupal\user\RoleInterface;

/**
 * Implements hook_element_info_alter().
 */
function lightning_core_element_info_alter(array &$info) {
  $info['radios']['#legend'] = $info['checkboxes']['#legend'] = [];
  $info['radios']['#process'][] = $info['checkboxes']['#process'][] = [ElementHelper::class, 'processLegend'];
}

/**
 * Implements hook_help().
 */
function lightning_core_help($route_name, RouteMatchInterface $route_match) {
  $matched = [];
  // Parse the route name to figure out what display mode we're looking at:
  // 0 is the entire string.
  // 1 is 'view' or 'form'.
  // 2 is the ID of the affected entity type.
  // 3 is 'view_mode' or 'form_mode'.
  // 4 is 'view' or 'form'.
  $expr = '/^entity\.entity_(view|form)_display\.([a-z_]+)\.((view|form)_mode)$/';

  if (preg_match($expr, $route_name, $matched)) {
    $entity_id = sprintf(
      '%s.%s',
      $route_match->getParameter('entity_type_id'),
      $route_match->getParameter($matched[3] . '_name')
    );

    /** @var \Drupal\Core\Entity\EntityDisplayModeInterface $display_mode */
    $display_mode = \Drupal::entityTypeManager()
      ->getStorage('entity_' . $matched[3])
      ->load($entity_id);

    if ($display_mode) {
      $description = $display_mode->getThirdPartySetting('lightning_core', 'description');
      if ($description) {
        return '<p>' . $description . '</p>';
      }
    }
  }
}

/**
 * Implements hook_modules_installed().
 */
function lightning_core_modules_installed(array $modules) {
  if (in_array('token', $modules)) {
    $view_modes = [];
    foreach (\Drupal::entityTypeManager()->getDefinitions() as $entity_type) {
      $view_modes[] = $entity_type->id() . '.token';
    }

    $view_modes = EntityViewMode::loadMultiple($view_modes);
    /** @var \Drupal\Core\Entity\EntityViewModeInterface $view_mode */
    foreach ($view_modes as $view_mode) {
      $view_mode->setThirdPartySetting('lightning_core', 'internal', TRUE)
        ->save();
    }
  }
}

/**
 * Implements hook_entity_load().
 */
function lightning_core_entity_load(array $entities) {
  // Maintain a list of entity UUIDs whose aliases we've already looked up.
  // We only want to look up a particular entity's alias once per request in
  // order to prevent infinite loops (see issue #2831550).
  static $looked_up = [];

  /** @var \Drupal\Core\Path\AliasStorageInterface $alias_storage */
  $alias_storage = \Drupal::service('path.alias_storage');

  foreach ($entities as $entity) {
    $uuid = $entity->uuid();

    // If the entity has an empty path field, try to set its value. Amazingly,
    // Path does not do this on its freaking own.
    if (
      empty($looked_up[$uuid]) &&
      $entity instanceof FieldableEntityInterface &&
      $entity->hasField('path') &&
      $entity->path instanceof PathFieldItemList &&
      $entity->path->isEmpty()
    ) {
      $looked_up[$uuid] = TRUE;

      $alias = $alias_storage->load([
        'source' => '/' . $entity->toUrl()->getInternalPath(),
      ]);

      if ($alias) {
        $entity->path->setValue($alias);
      }
    }
  }
}

/**
 * Puts an associative array into an arbitrary order.
 *
 * @param array $values
 *   The array to reorder.
 * @param array $keys
 *   The keys, in their desired order.
 *
 * @deprecated in Lightning 2.0.3 and will be removed in Lightning 3.x. Use
 * \Drupal\lightning_core\Element::order() instead.
 */
function array_reorder(array &$values, array $keys) {
  ElementHelper::order($values, $keys);
}

/**
 * Pre-render function to disable all buttons in a renderable element.
 *
 * @param array $element
 *   The renderable element.
 *
 * @return array
 *   The renderable element with all buttons (at all levels) disabled.
 *
 * @deprecated in Lightning 2.0.3 and will be removed in Lightning 3.x. Use
 * \Drupal\lightning_core\Element::disableButtons() instead.
 */
function lightning_core_disable_buttons(array $element) {
  return ElementHelper::disableButtons($element);
}

/**
 * Implements hook_form_alter().
 */
function lightning_core_form_alter(array &$form, FormStateInterface $form_state) {
  $form_object = $form_state->getFormObject();

  if ($form_object instanceof EntityFormInterface) {
    $supported_operations = ['default', 'add', 'edit'];
    $entity = $form_object->getEntity();

    if (($entity instanceof EntityDisplayModeInterface || $entity instanceof RoleInterface) && in_array($form_object->getOperation(), $supported_operations)) {
      $form['description'] = [
        '#type' => 'textarea',
        '#title' => t('Description'),
        '#description' => t('Additional relevant information about this @entity_type, such as where it is used and what it is for.', [
          '@entity_type' => $entity->getEntityType()->getSingularLabel(),
        ]),
        '#rows' => 2,
        '#default_value' => $entity->getThirdPartySetting('lightning_core', 'description'),
      ];
      $form['actions']['submit']['#submit'][] = 'lightning_core_set_third_party_description';
    }
  }
}

/**
 * Implements hook_block_view_alter().
 */
function lightning_core_block_view_alter(array &$build, BlockPluginInterface $block) {
  \Drupal::service('renderer')->addCacheableDependency($build, $block);

  // Always add block_view:BASE_PLUGIN_ID as a cache tag.
  $build['#cache']['tags'][] = 'block_view:' . $block->getBaseId();

  // If the plugin is a derivative, add block_view:FULL_PLUGIN_ID as well.
  if ($block->getDerivativeId()) {
    $build['#cache']['tags'][] = 'block_view:' . $block->getPluginId();
  }
}

/**
 * Form submit handler: updates the description of a configuration entity.
 *
 * @param array $form
 *   The complete form.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   The current form state.
 */
function lightning_core_set_third_party_description(array &$form, FormStateInterface $form_state) {
  $form_state
    ->getFormObject()
    ->getEntity()
    ->setThirdPartySetting('lightning_core', 'description', $form_state->getValue('description'))
    ->save();

  // The help text block is very likely to be render cached, so invalidate the
  // relevant cache tag. See lightning_core_block_view_alter() and
  // lightning_core_help().
  \Drupal::service('cache_tags.invalidator')->invalidateTags(['block_view:help_block']);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function lightning_core_form_system_modules_alter(array &$form) {
  $package = 'Lightning (Experimental)';

  if (isset($form['modules'][$package])) {
    $warning = t('Here may be dragons! Please be sure you <a href="@url">understand the potential risks</a> of experimental extensions before enabling one.', [
      '@url' => 'http://lightning.acquia.com/lightning-experimental-modules',
    ]);
    $form['modules'][$package]['#description'] = '<p>' . $warning . '</p>';
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function lightning_core_form_user_form_alter(array &$form) {
  if (isset($form['account']['roles'])) {
    /** @var RoleInterface $role */
    foreach (Role::loadMultiple() as $id => $role) {
      $form['account']['roles']['#legend'][$id] = $role
        ->getThirdPartySetting('lightning_core', 'description');
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function lightning_core_node_type_insert(NodeTypeInterface $node_type) {
  $config = \Drupal::config('lightning_core.settings')->get('content_roles');
  if (empty($config)) {
    return;
  }

  $permission_map = function ($permission) use ($node_type) {
    return str_replace('?', $node_type->id(), $permission);
  };

  foreach ($config as $key => $info) {
    if ($info['enabled']) {
      Role::create([
        'id' => $node_type->id() . '_' . $key,
        'label' => str_replace('?', $node_type->label(), $info['label']),
        'permissions' => array_map($permission_map, $info['permissions']),
      ])->save();
    }
  }

  user_role_grant_permissions('content_manager', [
    'create ' . $node_type->id() . ' content',
    'delete any ' . $node_type->id() . ' content',
    'edit any ' . $node_type->id() . ' content',
  ]);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function lightning_core_node_type_delete(NodeTypeInterface $node_type) {
  $config = \Drupal::config('lightning_core.settings')->get('content_roles');

  foreach (array_keys($config) as $key) {
    $role = Role::load($node_type->id() . '_' . $key);
    if ($role) {
      $role->delete();
    }
  }

  $role = Role::load('content_manager');
  if ($role) {
    user_role_revoke_permissions($role->id(), [
      'create ' . $node_type->id() . ' content',
      'delete any ' . $node_type->id() . ' content',
      'edit any ' . $node_type->id() . ' content',
    ]);
  }
}

/**
 * Rebuilds the service container.
 */
function lightning_core_rebuild_container() {
  require_once \Drupal::root() . '/core/includes/utility.inc';
  $class_loader = \Drupal::service('class_loader');
  $request = \Drupal::request();
  drupal_rebuild($class_loader, $request);
}

/**
 * Implements template_preprocess_block().
 */
function lightning_core_preprocess_block(array &$variables) {
  $variables['attributes']['data-block-plugin-id'] = $variables['elements']['#plugin_id'];
}

/**
 * Creates a config entity from default configuration.
 *
 * @param string $entity_type
 *   The config entity type ID.
 * @param string $id
 *   The unprefixed entity ID.
 * @param string $module
 *   (optional) The module which has the default configuration.
 *
 * @deprecated in Lightning 2.0.3 and will be removed in Lightning 3.x. Use the
 * lightning.config_helper service instead.
 */
function lightning_core_create_config($entity_type, $id, $module = 'lightning_core') {
  \Drupal::service('lightning.config_helper')
    ->install($module)
    ->createEntity($entity_type, $id);
}

/**
 * Reads a stored config file from a module's config/install directory.
 *
 * @param string $id
 *   The config ID.
 * @param string $module
 *   (optional) The module to search. Defaults to 'lightning_core'.
 *
 * @return array
 *   The config data.
 *
 * @deprecated in Lightning 2.0.3 and will be removed in Lightning 3.x. Use the
 * lightning.config_helper service instead.
 */
function lightning_core_read_config($id, $module = 'lightning_core') {
  return \Drupal::service('lightning.config_helper')
    ->install($module)
    ->read($id);
}

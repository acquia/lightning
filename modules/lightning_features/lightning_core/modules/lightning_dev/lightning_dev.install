<?php

/**
 * @file
 * Contains installation and update routines for Lightning Dev.
 */

use Drupal\entity_browser\Entity\EntityBrowser;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;
use Drupal\lightning_core\ConfigHelper as Config;
use Drupal\media_entity\Entity\MediaBundle;
use Drupal\scheduled_updates\Entity\ScheduledUpdateType;
use Drupal\views\Entity\View;

/**
 * Implements hook_install().
 */
function lightning_dev_install() {
  \Drupal::configFactory()
    ->getEditable('system.performance')
    ->set('css.preprocess', FALSE)
    ->set('js.preprocess', FALSE)
    ->save();

  \Drupal::configFactory()
    ->getEditable('system.logging')
    ->set('error_level', ERROR_REPORTING_DISPLAY_ALL)
    ->save();

  // Set up Media Entity Twitter to use Twitter's API for thumbnail generation.
  $tweet_bundle = MediaBundle::load('tweet');
  $configuration = array_merge($tweet_bundle->getTypeConfiguration(), [
    'use_twitter_api' => TRUE,
    'consumer_key' => 'EOPhWrgHCRnCB9cGualb1UVBM',
    'consumer_secret' => 'AX5w9QYDvUJWdD0y0g2EtG3tFIZC9Lg4kR21iaAYakkPG8YKIp',
    'oauth_access_token' => '52258222-ICStkPK2QcFN5d7v1FKJ1BMnqqPuuJnLIDr12Jsjs',
    'oauth_access_token_secret' => 'Z4qff1DPLhqxHwei0jXgsnU0xdBFET4wSpQYn6Si3G3lF',
    'generate_thumbnails' => TRUE,
  ]);
  $tweet_bundle->setTypeConfiguration($configuration);
  $tweet_bundle->save();

  // Sentence-case the label of the media browser's embed code widget. Yes, not
  // doing this can cause tests to fail.
  $entity_browser = EntityBrowser::load('media_browser');
  $widgets = $entity_browser->get('widgets');
  $widgets['8b142f33-59d1-47b1-9e3a-4ae85d8376fa']['label'] = 'Create embed';
  $entity_browser->set('widgets', $widgets);
  $entity_browser->save();
}

/**
 * Executes manual updates for Lightning 2.0.1 --> 2.0.2.
 */
function lightning_dev_update_8001() {
  \Drupal::service('module_installer')
    ->install(['diff', 'lightning_contact_form']);
}

/**
 * Executes manual updates for Lightning 2.0.2 --> 2.0.3.
 */
function lightning_dev_update_8002() {
  $config = Config::forModule('lightning_landing_page');

  $config->getEntity('field_config', 'node.landing_page.body')->save();
  $config->getEntity('entity_view_display', 'node.landing_page.teaser')->save();

  $values = $config->read('core.entity_form_display.node.landing_page.default');
  entity_get_form_display('node', 'landing_page', 'default')
    ->setComponent('body', $values['content']['body'])
    ->save();

  $values = $config->read('core.entity_view_display.node.landing_page.default');
  entity_get_display('node', 'landing_page', 'default')
    ->setComponent('body', $values['content']['body'])
    ->unsetThirdPartySetting('panelizer', 'enable')
    ->unsetThirdPartySetting('panelizer', 'custom')
    ->unsetThirdPartySetting('panelizer', 'allow')
    ->unsetThirdPartySetting('panelizer', 'default')
    ->unsetThirdPartySetting('panelizer', 'displays')
    ->save();

  \Drupal::service('module_installer')->install(['lightning_search']);

  // Add a relationship to the latest revision, and the forward revision
  // indicator, to the content view. This is copied directly out of
  // lightning_workflow_install(), so any changes there will need to be cloned
  // here. Which sucks, but there's not a lot of choice here...
  $view = View::load('content');
  $display = &$view->getDisplay('default');
  $display['display_options']['relationships']['latest_revision__node'] = unserialize('a:8:{s:2:"id";s:21:"latest_revision__node";s:5:"table";s:26:"workbench_revision_tracker";s:5:"field";s:21:"latest_revision__node";s:12:"relationship";s:4:"none";s:10:"group_type";s:5:"group";s:11:"admin_label";s:15:"latest revision";s:8:"required";b:1;s:9:"plugin_id";s:8:"standard";}');
  $display['display_options']['fields']['forward_revision_exists'] = unserialize('a:23:{s:2:"id";s:23:"forward_revision_exists";s:5:"table";s:15:"node_field_data";s:5:"field";s:23:"forward_revision_exists";s:12:"relationship";s:4:"none";s:10:"group_type";s:5:"group";s:11:"admin_label";s:0:"";s:5:"label";s:21:"Has unpublished edits";s:7:"exclude";b:0;s:5:"alter";a:26:{s:10:"alter_text";b:0;s:4:"text";s:0:"";s:9:"make_link";b:0;s:4:"path";s:0:"";s:8:"absolute";b:0;s:8:"external";b:0;s:14:"replace_spaces";b:0;s:9:"path_case";s:4:"none";s:15:"trim_whitespace";b:0;s:3:"alt";s:0:"";s:3:"rel";s:0:"";s:10:"link_class";s:0:"";s:6:"prefix";s:0:"";s:6:"suffix";s:0:"";s:6:"target";s:0:"";s:5:"nl2br";b:0;s:10:"max_length";i:0;s:13:"word_boundary";b:1;s:8:"ellipsis";b:1;s:9:"more_link";b:0;s:14:"more_link_text";s:0:"";s:14:"more_link_path";s:0:"";s:10:"strip_tags";b:0;s:4:"trim";b:0;s:13:"preserve_tags";s:0:"";s:4:"html";b:0;}s:12:"element_type";s:0:"";s:13:"element_class";s:0:"";s:18:"element_label_type";s:0:"";s:19:"element_label_class";s:0:"";s:19:"element_label_colon";b:1;s:20:"element_wrapper_type";s:0:"";s:21:"element_wrapper_class";s:0:"";s:23:"element_default_classes";b:1;s:5:"empty";s:0:"";s:10:"hide_empty";b:0;s:10:"empty_zero";b:0;s:16:"hide_alter_empty";b:1;s:11:"entity_type";s:4:"node";s:9:"plugin_id";s:23:"forward_revision_exists";}');
  $view->save();
}

/**
 * Executes manual updates for Lightning 2.0.3 --> 2.0.4.
 */
function lightning_dev_update_8003() {
  // Instantiate field_moderation_state on multi-node embargoes.
  Config::forModule('lightning_workflow')
    ->getEntity('field_config', 'scheduled_update.multiple_node_embargo.field_moderation_state')
    ->save();

  // Replace field_moderation_state_1 with field_moderation_state on the
  // multi-node embargo form.
  $display = entity_get_form_display('scheduled_update', 'multiple_node_embargo', 'default');
  $component = $display->getComponent('field_moderation_state_1');
  if ($component) {
    $display
      ->setComponent('field_moderation_state', $component)
      ->removeComponent('field_moderation_state_1')
      ->save();
  }

  // Replace field_moderation_state_1 mapping with field_moderation_state in
  // multi-node embargoes.
  $update_type = ScheduledUpdateType::load('multiple_node_embargo');
  $map = $update_type->getFieldMap();
  if (isset($map['field_moderation_state_1'])) {
    $map['field_moderation_state'] = $map['field_moderation_state_1'];
    unset($map['field_moderation_state_1']);
    $update_type->setFieldMap($map);
    $update_type->save();
  }

  // Completely destroy field_moderation_state_1.
  $field = FieldConfig::load('scheduled_update.multiple_node_embargo.field_moderation_state_1');
  if ($field) {
    $field->delete();
  }
  $storage = FieldStorageConfig::load('scheduled_update.field_moderation_state_1');
  if ($storage) {
    $storage->delete();
  }

  // Set node.scheduled_update field storage to unlimited cardinality.
  FieldStorageConfig::load('node.scheduled_update')
    ->setCardinality(FieldStorageConfig::CARDINALITY_UNLIMITED)
    ->save();

  // Rename all node scheduled_update fields.
  $fields = \Drupal::entityTypeManager()
    ->getStorage('field_config')
    ->loadByProperties([
      'field_name' => 'scheduled_update',
      'entity_type' => 'node',
    ]);

  /** @var \Drupal\field\Entity\FieldConfig $field */
  foreach ($fields as $field) {
    $field->setLabel(t('Scheduled updates'))->save();
  }

  // Allow the image browser to size itself responsively.
  $image_browser = EntityBrowser::load('image_browser');
  $display_plugin = $image_browser->getDisplay();
  $configuration = $display_plugin->getConfiguration();
  $configuration['width'] = $configuration['height'] = NULL;
  $display_plugin->setConfiguration($configuration);
  $image_browser->save();

  // The content view's relationship to the latest node revision should not be
  // required - Issue #2858566.
  $view = View::load('content');
  $display = &$view->getDisplay('default');
  $display['display_options']['relationships']['latest_revision__node']['required'] = FALSE;
  $view->save();
}

/**
 * Removed in Lightning 8.x-2.13.
 *
 * Formerly set up centralized Behat configuration.
 *
 * @deprecated
 */
function lightning_dev_update_8004() {
}

/**
 * Executes manual updates for Lightning 2.1.0 --> 2.1.1.
 */
function lightning_dev_update_8005() {
  // Add the 'bundle' contextual filter to the media browser.
  $view = View::load('media');
  $display = &$view->getDisplay('entity_browser_1');
  $display['display_options']['arguments']['bundle'] = unserialize('a:27:{s:2:"id";s:6:"bundle";s:5:"table";s:16:"media_field_data";s:5:"field";s:6:"bundle";s:12:"relationship";s:4:"none";s:10:"group_type";s:5:"group";s:11:"admin_label";s:0:"";s:14:"default_action";s:7:"default";s:9:"exception";a:3:{s:5:"value";s:3:"all";s:12:"title_enable";b:0;s:5:"title";s:3:"All";}s:12:"title_enable";b:0;s:5:"title";s:0:"";s:21:"default_argument_type";s:29:"entity_browser_widget_context";s:24:"default_argument_options";a:3:{s:11:"context_key";s:14:"target_bundles";s:8:"fallback";s:3:"all";s:8:"multiple";s:2:"or";}s:25:"default_argument_skip_url";b:0;s:15:"summary_options";a:4:{s:9:"base_path";s:0:"";s:5:"count";b:1;s:14:"items_per_page";i:25;s:8:"override";b:0;}s:7:"summary";a:3:{s:10:"sort_order";s:3:"asc";s:17:"number_of_records";i:0;s:6:"format";s:15:"default_summary";}s:18:"specify_validation";b:1;s:8:"validate";a:2:{s:4:"type";s:19:"entity:media_bundle";s:4:"fail";s:6:"ignore";}s:16:"validate_options";a:4:{s:9:"operation";s:4:"view";s:8:"multiple";i:1;s:6:"access";b:0;s:7:"bundles";N;}s:8:"glossary";b:0;s:5:"limit";i:0;s:4:"case";s:4:"none";s:9:"path_case";s:4:"none";s:14:"transform_dash";b:0;s:12:"break_phrase";b:1;s:11:"entity_type";s:5:"media";s:12:"entity_field";s:6:"bundle";s:9:"plugin_id";s:6:"string";}');
  $display['display_options']['defaults']['arguments'] = FALSE;
  $display['display_options']['filters']['bundle']['expose']['argument'] = 'bundle';
  $view->save();
}

<?php

/**
 * @file
 * Contains code for Lightning's integration with workspaces.
 */

use Drupal\Core\Access\AccessResult;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Entity\FieldableEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Session\AccountInterface;
use Drupal\lightning_core\Element;
use Drupal\lightning_core\OverrideHelper as Override;
use Drupal\lightning_preview\AliasHandler;
use Drupal\lightning_preview\Exception\EntityLockedException;
use Drupal\lightning_preview\Form\ModerationStateForm;
use Drupal\lightning_preview\Form\NodeDeleteForm;
use Drupal\lightning_preview\Form\TermDeleteForm;
use Drupal\lightning_preview\Form\WorkspaceForm;
use Drupal\lightning_preview\Plugin\Field\FieldWidget\PathWidget;
use Drupal\lightning_preview\WorkspaceListBuilder;
use Drupal\multiversion\Entity\WorkspaceInterface;
use Drupal\user\Entity\Role;
use Drupal\workbench_moderation\Entity\ModerationState;
use Drupal\workbench_moderation\ModerationStateTransitionInterface as StateTransitionInterface;

/**
 * Implements hook_help().
 */
function lightning_preview_help($route_name, RouteMatchInterface $route_match) {
  $variables = [];

  if ($route_name == 'entity.workspace.edit_form') {
    /** @var WorkspaceInterface $workspace */
    $workspace = $route_match->getParameter('workspace');

    if ($workspace->getMachineName() != 'live') {
      $states = $workspace
        ->type
        ->entity
        ->getThirdPartySetting('workbench_moderation', 'allowed_moderation_states', []);

      $published_states = [];
      /** @var ModerationState $state */
      foreach (ModerationState::loadMultiple($states) as $state) {
        if ($state->isPublishedState()) {
          $published_states[] = $state->label();
        }
      }
      $variables['@published'] = Element::oxford($published_states, t('or'));

      return t('<p>You can push all changes in this workspace to your live site by setting the moderation state to <strong>@published</strong>.</p>', $variables);
    }
  }
}

/**
 * Implements hook_search_api_processor_info_alter().
 */
function lightning_preview_search_api_processor_info_alter(array &$processors) {
  // We cannot import the class directly because it extends the RenderedItem
  // class from Search API, and if Search API isn't enabled, importing the class
  // will make big kaboom.
  $processors['rendered_item']['class'] = '\Drupal\lightning_preview\Plugin\search_api\processor\RenderedItem';
}

/**
 * Implements hook_field_widget_info_alter().
 */
function lightning_preview_field_widget_info_alter(array &$info) {
  if (isset($info['path'])) {
    $info['path']['class'] = \Drupal::moduleHandler()->moduleExists('pathauto')
      // We cannot use ::class here, because if Pathauto doesn't exist, PHP will
      // blow up if we try to import the class.
      ? '\Drupal\lightning_preview\Plugin\Field\FieldWidget\PathautoWidget'
      : PathWidget::class;
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function lightning_preview_entity_type_alter(array &$entity_types) {
  // Our list builder displays the current moderation state for each workspace.
  // @TODO Replace this with a view.
  Override::entityHandler($entity_types['workspace'], 'list_builder', WorkspaceListBuilder::class);

  // Use entity deletion forms that are aware of the purge() method implemented
  // by Multiversion-aware storage handlers.
  if (isset($entity_types['node'])) {
    Override::entityForm($entity_types['node'], NodeDeleteForm::class, 'delete');
  }
  if (isset($entity_types['taxonomy_term'])) {
    Override::entityForm($entity_types['taxonomy_term'], TermDeleteForm::class, 'delete');
  }

  // Use a special form when editing moderation states so that moderation states
  // can be configured to lock workspaces.
  Override::entityForm($entity_types['moderation_state'], ModerationStateForm::class, 'edit');

  // Use a special form when adding or editing workspaces in order to indicate
  // which moderation states are locked.
  Override::entityForm($entity_types['workspace'], WorkspaceForm::class);
  Override::entityForm($entity_types['workspace'], WorkspaceForm::class, 'add');
  Override::entityForm($entity_types['workspace'], WorkspaceForm::class, 'edit');
}

/**
 * Implements hook_toolbar_alter().
 */
function lightning_preview_toolbar_alter(array &$items) {
  if (isset($items['workspace_update'])) {
    // Do not show the 'Update' toolbar button if the active workspace has no
    // upstream. Workspaces are required to have an upstream, but in Lightning,
    // the Live workspace does not -- because in a single-site setup, what
    // exactly sits upstream from the live site?
    $items['workspace_update']['tab']['#access'] = \Drupal::service('workspace.manager')
      ->getActiveWorkspace()
      ->get('upstream')
      ->isEmpty() == FALSE;
  }
}

/**
 * Implements hook_pathauto_alias_alter().
 */
function lightning_preview_pathauto_alias_alter(&$alias, array &$context) {
  if (isset($context['data']['node'])) {
    $entity = $context['data']['node'];
  }

  if (isset($entity) && $entity instanceof FieldableEntityInterface && $entity->hasField('workspace') && $entity->workspace->isEmpty() == FALSE) {
    $alias = AliasHandler::addPrefix($alias, $entity->workspace->entity->getMachineName());
  }
}

/**
 * Implements hook_module_implements_alter().
 */
function lightning_preview_module_implements_alter(array &$implementations, $hook) {
  $module = 'lightning_preview';

  // Regarding hook_entity_presave():
  // Workbench Moderation's implementation of hook_entity_presave() screws up
  // our workspace revisioning logic, so our implementation needs to run after
  // it. We can ice this once we've ditched Workbench Moderation in favor of
  // Content Moderation.
  //
  // Regarding hook_field_widget_info_alter():
  // Normally, Pathauto's implementation would run after ours, and it would
  // switch the plugin to its own class. We have a special widget that extends
  // Pathauto's, so we need to make sure it is the one that gets used.
  if ($hook == 'entity_presave' || $hook == 'field_widget_info_alter') {
    $order = array_diff(array_keys($implementations), [$module]);
    array_push($order, $module);
    array_reorder($implementations, $order);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert().
 */
function lightning_preview_moderation_state_transition_insert(StateTransitionInterface $transition) {
  user_role_grant_permissions('workspace_reviewer', [
    'use ' . $transition->id() . ' transition',
  ]);
}

/**
 * Implements hook_ENTITY_TYPE_delete().
 */
function lightning_preview_moderation_state_transition_delete(StateTransitionInterface $transition) {
  $role = Role::load('workspace_reviewer');
  if ($role) {
    user_role_revoke_permissions($role->id(), [
      'use ' . $transition->id() . ' transition',
    ]);
  }
}

/**
 * Implements hook_entity_create_access().
 */
function lightning_preview_entity_create_access(AccountInterface $account, array $context, $entity_bundle) {
  $locked = \Drupal::service('lightning_preview.workspace_lock')
    ->isEntityTypeLocked($context['entity_type_id']);

  return AccessResult::forbiddenIf($locked);
}

/**
 * Implements hook_entity_access().
 */
function lightning_preview_entity_access(EntityInterface $entity, $operation, AccountInterface $account) {
  // Don't interfere with the view operation.
  if ($operation == 'view') {
    return AccessResult::neutral();
  }

  // Allow filter formats to be used like normal.
  if ($entity->getEntityTypeId() == 'filter_format' && $operation == 'use') {
    return AccessResult::neutral();
  }

  // The live workspace is not editable under any circumstances.
  if ($entity instanceof WorkspaceInterface && $operation == 'update' && $entity->getMachineName() == 'live') {
    return AccessResult::forbidden('The live workspace can never be edited.');
  }

  try {
    \Drupal::service('lightning_preview.workspace_lock')->assertEntityUnlocked($entity);
    return AccessResult::neutral();
  }
  catch (EntityLockedException $e) {
    return AccessResult::forbidden($e->getMessage());
  }
}

/**
 * Implements hook_entity_presave().
 */
function lightning_preview_entity_presave(EntityInterface $entity) {
  \Drupal::service('lightning_preview.workspace_lock')->assertEntityUnlocked($entity);

  // Workspaces are revisionable only because they must be moderatable, and
  // moderatable things MUST be revisionable. As far as the user is concerned,
  // though, the workspaces are NOT revisionable -- there's no real concept
  // of 'versions' of a workspace -- so the latest revision should always be
  // the default one, and that's that.
  if ($entity instanceof WorkspaceInterface && $entity->isNewRevision()) {
    $entity->isDefaultRevision(TRUE);
  }

  \Drupal::service('lightning_preview.alias_handler')->replicateAlias($entity);
}

/**
 * Implements hook_entity_predelete().
 */
function lightning_preview_entity_predelete(EntityInterface $entity) {
  \Drupal::service('lightning_preview.workspace_lock')->assertEntityUnlocked($entity);
}

/**
 * Implements hook_form_alter().
 */
function lightning_preview_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();

  // If this is the form for a locked entity, disable all the buttons and set
  // a stern message.
  if ($form_object instanceof EntityFormInterface) {
    $entity = $form_object->getEntity();

    try {
      \Drupal::service('lightning_preview.workspace_lock')->assertEntityUnlocked($entity);
    }
    catch (EntityLockedException $e) {
      drupal_set_message($e->getMessage(), 'warning');
      $form['#pre_render'][] = [Element::class, 'disableButtons'];
    }
  }
}

<?php

namespace Acquia\LightningExtension\Context;

use Drupal\DrupalExtension\Context\DrupalSubContextBase;
use Drupal\DrupalExtension\Context\MinkContext;

/**
 * A context for working with the Panels in-place editor.
 */
class PanelsInPlaceContext extends DrupalSubContextBase {

  /**
   * The Mink context.
   *
   * @var MinkContext
   */
  protected $minkContext;

  /**
   * Gathers required contexts.
   *
   * @BeforeScenario
   */
  public function gatherContexts() {
    $this->minkContext = $this->getContext(MinkContext::class);
  }

  /**
   * Returns the active Panels IPE tab's contents.
   *
   * @return \Behat\Mink\Element\NodeElement
   *   The active tab's contents.
   */
  protected function getActiveTab() {
    return $this->assertSession()
      ->elementExists('css', '.ipe-tabs-content', $this->assertTray());
  }

  /**
   * Asserts the presence of the Panels IPE tray.
   *
   * @return \Behat\Mink\Element\NodeElement
   *   The Panels IPE tray element.
   *
   * @Then I should see the Panels IPE tray
   */
  public function assertTray() {
    return $this->assertSession()->elementExists('css', '#panels-ipe-tray');
  }

  /**
   * Opens a tab of the Panels IPE tray.
   *
   * @param string $tab
   *   The title of the tab to activate.
   *
   * @return \Behat\Mink\Element\NodeElement
   *   The tab contents.
   *
   * @When I open the :tab tab
   */
  public function openTab($tab) {
    $assert = $this->assertSession();

    // Assert that the tab exists...
    $link = $assert->elementExists(
      'named',
      ['link', $tab],
      $assert->elementExists('css', '.ipe-tabs', $this->assertTray())
    );

    // ...but only open it if not already active.
    if ($link->getParent()->hasClass('active') == FALSE) {
      $link->click();
      $this->minkContext->iWaitForAjaxToFinish();
    }

    return $this->getActiveTab();
  }

  /**
   * Opens a particular block category of the "Manage Content" tab.
   *
   * @param string $category
   *   The category to open.
   *
   * @return \Behat\Mink\Element\NodeElement
   *   The tab contents.
   *
   * @When I open the :category category
   */
  public function openCategory($category) {
    $tab = $this->openTab('Manage Content');

    // Assert that the category exists...
    $link = $this->assertSession()
      ->elementExists('css',
        '.ipe-category[data-category="' . $category . '"]',
        $tab
      );

    // ...but only open it if not already active.
    if ($link->hasClass('active') == FALSE) {
      $link->click();
      $this->minkContext->iWaitForAjaxToFinish();
    }

    return $tab;
  }

  /**
   * Asserts that a particular block plugin is available.
   *
   * @param string $plugin_id
   *   The block plugin ID.
   * @param string $category
   *   (optional) The category to open.
   *
   * @Then I should see the :plugin_id plugin
   * @Then I should see the :plugin_id plugin in the :category category
   */
  public function assertBlockPluginExists($plugin_id, $category = NULL) {
    $this->assertSession()
      ->elementExists(
        'css',
        '.ipe-block-plugin a[data-plugin-id="' . $plugin_id . '"]',
        $category ? $this->openCategory($category) : $this->getActiveTab()
      );
  }

  /**
   * Asserts that a particular block plugin is not available.
   *
   * @param string $plugin_id
   *   The block plugin ID.
   * @param string $category
   *   (optional) The category to open.
   *
   * @Then I should not see the :plugin_id plugin
   * @Then I should not see the :plugin_id plugin in the :category category
   */
  public function assertBlockPluginNotExists($plugin_id, $category = NULL) {
    $this->assertSession()
      ->elementNotExists(
        'css',
        '.ipe-block-plugin a[data-plugin-id="' . $plugin_id . '"]',
        $category ? $this->openCategory($category) : $this->getActiveTab()
      );
  }

  /**
   * Saves the current IPE layout as a custom layout.
   *
   * @When I save the layout
   */
  public function saveLayoutAsCustom() {
    $this->assertSession()
      ->elementExists('named', ['link', 'Save as custom'], $this->openTab('Save'))
      ->click();

    $this->minkContext->iWaitForAjaxToFinish();
  }

  /**
   * Saves the current IPE layout as a default layout.
   *
   * @When I save the layout as default
   */
  public function saveLayoutAsDefault() {
    $this->assertSession()
      ->elementExists('named', ['link', 'Save as default'], $this->openTab('Save'))
      ->click();

    $this->minkContext->iWaitForAjaxToFinish();
  }

  /**
   * Places a block into a Panels IPE layout.
   *
   * @param string $plugin_id
   *   The block plugin ID.
   * @param string $category
   *   The block's category.
   *
   * @When I place the :plugin_id block from the :category category
   */
  public function placeBlock($plugin_id, $category) {
    $assert = $this->assertSession();

    $tab = $this->openCategory($category);

    $assert
      ->elementExists(
        'css',
        '.ipe-block-plugin a[data-plugin-id="' . $plugin_id . '"]',
        $tab
      )
      ->click();

    $this->minkContext->iWaitForAjaxToFinish();

    $assert
      ->elementExists('css', '.panels-ipe-block-plugin-form', $tab)
      ->pressButton('Add');

    $this->minkContext->iWaitForAjaxToFinish();
  }

}
